" Let Vim and NeoVim shares the same plugin directory.
" Comment it out if you don't like
let g:spacevim_plug_home = '~/.vim/plugged'

" The default leader key is space key.
" Uncomment the line below and modify "<\Space>" if you prefer another
" let g:spacevim_leader = "<\Space>"

" The default local leader key is comma.
" Uncomment the line below and modify ',' if you prefer another
" let g:spacevim_localleader = ','

" Enable the existing layers in space-vim
let g:spacevim_layers = [
      \ 'fzf', 'better-defaults', 'which-key', 'file-manager', 'markdown', 'deoplete'
      \ ]

" If you want to have more control over the layer, try using Layer command.
" if g:spacevim.gui
"   Layer 'airline'
" endif

" Manage your own plugins, refer to vim-plug's instruction for more detials.
function! UserInit()

  " Add plugin via Plug command.
  Plug 'junegunn/seoul256.vim'
  Plug 'mattn/vim-metarw-gdrive'
  Plug 'kana/vim-metarw'
  Plug 'mattn/webapi-vim'

endfunction

" Override the default settings as well as adding extras
function! UserConfig()
  " If you have installed the powerline fonts and want to enable airline layer
  " let g:airline_powerline_fonts=1

  " Use gui colors in terminal if available
  function! s:enable_termgui()
    if has('termguicolors')
      set termguicolors
      if g:spacevim.tmux
        " If use vim inside tmux, see https://github.com/vim/vim/issues/993
        " set Vim-specific sequences for RGB colors
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
      endif
    endif
  endfunction

  " If your terminal(-emulator) supports true colors, uncomment the line below
  " call s:enable_termgui()

  " enable mouse mode
  set mouse=a

  " when wrapping in enabled, wrap at words
  set linebreak

  map <leader>q :call CloseBufferWithoutClosingWindow()<CR>

  " write file whenever loosing focus
  au FocusLost * silent! update
  set nohidden
  set autowriteall

  " make misspelled words legible in spell mode
  hi SpellBad ctermbg=52
  hi SpellCap ctermbg=25

  " unmap any <Leader> mappings in terminal mode
  " so that there isn't a delay when pressing Space
  tunmap <Leader>wj
  tunmap <Leader>wk
  tunmap <Leader>wh
  tunmap <Leader>wl

  " escape leaves insert mode when in terminal
  tnoremap <Esc> <C-\><C-n>

  " disable line numbers in terminal
  " this fixes an issue where the cursor jumps when leaving insert mode
  au TermOpen * setlocal nonumber norelativenumber

  " allow yanking to clipboard if using crosh window
  nnoremap <Leader>cr :call ToggleCroshClip()<CR>


endfunction

let g:use_crosh_clip = 0
function! ToggleCroshClip()
  if g:use_crosh_clip
    exec 'nunmap "*p'
    exec 'vunmap "*y'
    exec 'nunmap "+p'
    exec 'vunmap "+y'
    let g:use_crosh_clip = 0
    echo 'croshclip disabled'
  else
    exec 'nnoremap "*p :r !croshclip -paste<CR>'
    exec 'vnoremap "*y :w !croshclip -copy<CR><CR>'
    exec 'nnoremap "+p :r !croshclip -paste<CR>'
    exec 'vnoremap "+y :w !croshclip -copy<CR><CR>'
    let g:use_crosh_clip = 1
    echo 'croshclip enabled'
  endif
endfunction

function! CloseBufferWithoutClosingWindow()
  exec ':bp<bar>sp<bar>bn<bar>bd<CR>'
endfunction
